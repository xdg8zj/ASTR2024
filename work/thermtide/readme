https://github.com/PrincetonUniversity/athena/wiki/Running-3D-MHD-with-OpenMP-and-MPI

----

start from the blast example in spherical coordinates
no mpi or hdf5

----

go to /Users/philarras/athena++/athena and type

python3 configure.py --prob blast --coord spherical_polar --ccmd /usr/bin/g++

which gives


  Your Athena++ distribution has now been configured with the following options: 
  Problem generator:            blast
  Coordinate system:            spherical_polar
  Equation of state:            adiabatic
  Riemann solver:               hllc
  Magnetic fields:              OFF
  Number of scalars:            0
  Number of chemical species:   0
  Special relativity:           OFF
  General relativity:           OFF
  Radiative Transfer:           OFF
  Implicit Radiation:           OFF
  Cosmic Ray Transport:         OFF
  Frame transformations:        OFF
  Self-Gravity:                 OFF
  Super-Time-Stepping:          OFF
  Chemistry:                    OFF
  KIDA rates:                   OFF
  ChemRadiation:                OFF
  chem_ode_solver:              OFF
  Debug flags:                  OFF
  Code coverage flags:          OFF
  Linker flags:                  
  Floating-point precision:     double
  Number of ghost cells:        2
  MPI parallelism:              OFF
  OpenMP parallelism:           OFF
  FFT:                          OFF
  HDF5 output:                  OFF
  Compiler:                     g++
  Compilation command:          /usr/bin/g++  -O3 -std=c++11

-----

then in that same directory compile with

make clean
make

philarras@Phils-MacBook-Pro athena % make clean
rm -rf obj/*
rm -rf bin/athena
rm -rf *.gcov
philarras@Phils-MacBook-Pro athena % make
/usr/bin/g++  -O3 -std=c++11 -c src/globals.cpp -o obj/globals.o
/usr/bin/g++  -O3 -std=c++11 -c src/main.cpp -o obj/main.o

etc. so it compiled fine. 

the executable file is
/Users/philarras/athena++/athena/bin/athena


----------

cd to the work subdirectory where you will run the code (here called work/annulus)
copy the input file to the work subdirectory where you will run the code
cp ../../athena/inputs/hydro/athinput.blast_sph .


-------

now run as follows

philarras@Phils-MacBook-Pro annulus % ../../athena/bin/athena -i athinput.blast_sph 

Setup complete, entering main loop...

cycle=0 time=0.0000000000000000e+00 dt=1.7866560873704186e-03
cycle=1 time=1.7866560873704186e-03 dt=1.7117215857017992e-03
etc.


------

output is binary .vtk files
see https://github.com/PrincetonUniversity/athena/wiki/Reading-Data-into-Python

vtk(filename)

Inputs:
filename: string containing the path to the desired Athena++ VTK output file to be read.
Outputs:
1D array of nx1+1 x-interfaces.
1D array of nx2+1 y-interfaces.
1D array of nx3+1 z-interfaces.
Dictionary of quantities defined on grid, given as either 3D arrays (for scalars; indices are ordered k, j, i, that is x3, x2, x1) or 4D arrays (for vectors; last index indexes the component of the vector). Dictionary keys correspond to array names as stored in the VTK file.
Example: Suppose one wants to read the conserved quantities from my_output.vtk. The following code snippet does this, describing the total energy and x-momentum in the cell with coordinates i=10, j=20, and k=30:
import sys
sys.path.insert(0, '<path/to/>athena/vis/python')
import athena_read
x,y,z,data = athena_read.vtk('my_output.vtk')
print('x-bounds: {0} to {1}'.format(x[10], x[11]))
print('y-bounds: {0} to {1}'.format(y[20], y[21]))
print('z-bounds: {0} to {1}'.format(z[30], z[31]))
print('total energy: {0}'.format(data['Etot'][30,20,10]))
print('x-momentum: {0}'.format(data['mom'][30,20,10,0]))
Note that Athena++'s VTK format stores vector quantities in 4D arrays, with the last index corresponding to the vector component.


-----
symbolic link of annulus.cpp from here to the /src/pgen directory

ln -s annulus.cpp /Users/philarras/athena++/athena/src/pgen/annulus.cpp
